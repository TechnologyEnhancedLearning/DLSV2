@using DigitalLearningSolutions.Web.Models.Enums
@using DigitalLearningSolutions.Web.ViewModels.TrackingSystem.Delegates.DelegateProgress
@model EditDelegateCourseAdminFieldViewModel

@{
  var errorHasOccurred = !ViewData.ModelState.IsValid;
  ViewData["Title"] = errorHasOccurred ? $"Error: Edit {Model.PromptText} field for course" : $"Edit {Model.PromptText} field for course";

  var routeParamsForBackLink = new Dictionary<string, string?>();

  string cancelLinkController;

  if (Model.AccessedVia.Equals(DelegateAccessRoute.CourseDelegates)) {
    routeParamsForBackLink.Add("accessedVia", Model.AccessedVia.ToString());
    routeParamsForBackLink.Add("progressId", Model.ProgressId.ToString());
    routeParamsForBackLink.Add("returnPage", Model.ReturnPage.ToString());
    cancelLinkController = "DelegateProgress";
  } else {
    routeParamsForBackLink.Add("delegateId", Model.DelegateId.ToString());
    cancelLinkController = "ViewDelegate";
  }
}

@*TODO: HEEDLS-780 - finalise these breadcrumbs once we hear from HEE about Delegate Progress page*@
@section NavBreadcrumbs {
  @if (Model.AccessedVia.Equals(DelegateAccessRoute.CourseDelegates)) {
    <partial name="~/Views/TrackingSystem/Delegates/Shared/_CourseDelegatesProgressBreadcrumbs.cshtml" model="(Model.CustomisationId, Model.ProgressId)" />
  } else {
    <partial name="~/Views/TrackingSystem/Delegates/Shared/_ViewDelegateProgressBreadcrumbs.cshtml" model="(Model.DelegateId, Model.ProgressId)" />
  }
}

<div class="nhsuk-grid-row">
  <div class="nhsuk-grid-column-full">
    @if (errorHasOccurred) {
      <vc:error-summary order-of-property-names="@new []{ nameof(@Model.Answer)}" />
    }

    <h1 class="nhsuk-heading-xl word-break">Edit @Model.PromptText field for course</h1>

    <div class="nhsuk-grid-row">
      <div class="nhsuk-grid-column-one-quarter nhsuk-body-l">
        Delegate
      </div>
      <div class="nhsuk-grid-column-three-quarters nhsuk-body-l nhsuk-u-font-weight-bold word-break">
        @Model.DelegateName
      </div>
    </div>

    <div class="nhsuk-grid-row">
      <div class="nhsuk-grid-column-one-half">

        <form class="nhsuk-u-margin-bottom-3" method="post" novalidate>
          <input type="hidden" asp-for="DelegateId" />
          <input type="hidden" asp-for="ProgressId" />
          <input type="hidden" asp-for="DelegateName" />
          <input type="hidden" asp-for="ReturnPage" />

          @if (Model.Options.Count > 0) {
            <div class="nhsuk-radios nhsuk-u-margin-bottom-4">
              @foreach (var radio in Model.Radios) {
                <div class="nhsuk-radios__item nhsuk-u-margin-bottom-3">
                  <input class="nhsuk-radios__input"
                         id="@radio.Value"
                         name="@nameof(Model.Answer)"
                         type="radio"
                         value="@radio.Value"
                         aria-describedby="@radio.Value-item-hint"
                         @(radio.Selected ? "checked" : string.Empty) />
                  <label class="nhsuk-label nhsuk-radios__label" for="@radio.Value">
                    @radio.Label
                  </label>
                </div>
              }
            </div>
          } else {
            <vc:text-input asp-for="@nameof(Model.Answer)"
                           label="Answer"
                           populate-with-current-value="true"
                           type="text"
                           spell-check="true"
                           autocomplete=""
                           hint-text="Answer must be 100 characters or fewer."
                           css-class="nhsuk-u-width-full" />
          }

          <button class="nhsuk-button" type="submit">Save</button>
        </form>
      </div>
    </div>

    <vc:cancel-link asp-controller="@cancelLinkController" asp-action="Index" link-text="Go back" asp-all-route-data="@routeParamsForBackLink" />
  </div>
</div>
