@inject IConfiguration Configuration
@using DigitalLearningSolutions.Data.Extensions
@using DigitalLearningSolutions.Web.ViewModels.LearningPortal.SelfAssessments
@using Microsoft.Extensions.Configuration
@model SelfAssessmentOverviewViewModel

@{
    var latestSignoff = Model.SupervisorSignOffs
        .Select(s => s.Verified)
        .DefaultIfEmpty(DateTime.MinValue)
        .Max();
    var latestResult = Model.CompetencyGroups
      .SelectMany(g => g.SelectMany(c => c.AssessmentQuestions))
      .Select(q => q.ResultDateTime)
      .DefaultIfEmpty(DateTime.MinValue)
      .Max();
    var competencySummaries = from g in Model.CompetencyGroups
                              let questions = g.SelectMany(c => c.AssessmentQuestions).Where(q => q.Required)
                              let selfAssessedCount = questions.Count(q => q.Result.HasValue)
                              let verifiedCount = questions.Count(q => !((q.Result == null || q.Verified == null || q.SignedOff != true) && q.Required))
                              select new ViewDataDictionary(ViewData)
{
        { "isSupervisorResultsReviewed", Model.SelfAssessment.IsSupervisorResultsReviewed },
        { "questionsCount", questions.Count() },
        { "selfAssessedCount", selfAssessedCount },
        { "verifiedCount", verifiedCount }
      };

    Layout = "SelfAssessments/_Layout";
    ViewData["Title"] = "Self Assessment";
    ViewData["SelfAssessmentTitle"] = Model.SelfAssessment.Name;
}
<link rel="stylesheet" href="@Url.Content("~/css/learningPortal/selfAssessment.css")" asp-append-version="true">
<link rel="stylesheet" href="@Url.Content("~/css/learningPortal/selfAssessmentOverview.css")" asp-append-version="true">
@section breadcrumbs {
    <li class="nhsuk-breadcrumb__item">
        <a class="nhsuk-breadcrumb__link" asp-action="SelfAssessment" asp-route-selfAssessmentId="@Model.SelfAssessment.Id">@(Model.SelfAssessment.Name) introduction</a>
    </li>
    <li class="nhsuk-breadcrumb__item">@(Model.VocabPlural()) home</li>
}

@section mobilebacklink
    {
    <p class="nhsuk-breadcrumb__back">
        <a class="nhsuk-breadcrumb__backlink" asp-action="SelfAssessment"
       asp-route-selfAssessmentId="@Model.SelfAssessment.Id">
            Back to @Model.SelfAssessment.Name
        </a>
    </p>
}
<h1>@Model.SelfAssessment.Name - @Model.VocabPlural()</h1>
@if (Model.SelfAssessment.NonReportable)
{
    <partial name="_NonReportableSelfAssessment" />
}
@if (Model.SelfAssessment.IsSupervised && Model.CompetencyGroups.Count() > 5)
{
    <div class="nhsuk-panell competency-group-panel nhsuk-u-padding-4">
        <partial name="SelfAssessments/_SelfAssessmentOverallProgress"
             model="@competencySummaries"
             view-data="@(new ViewDataDictionary(ViewData) { { "IsSupervisorResultsReviewed", Model.SelfAssessment.IsSupervisorResultsReviewed } })" />
    </div>
}
<partial name="SelfAssessments/_SearchSelfAssessmentOverview"
         model="@Model.SearchViewModel"
         view-data="@(new ViewDataDictionary(ViewData) { { "parent", Model } })" />
<partial name="_OverviewActionButtons.cshtml" model=Model />
<p><span role="alert">@Model.CompetencyGroups.Sum(g => g.Count()) matching @Model.VocabPlural().ToLower()</span></p>
@if (Model.CompetencyGroups.Any())
{
    var competencySummariesEnumerator = competencySummaries.GetEnumerator();
    foreach (var competencyGroup in Model.CompetencyGroups)
    {
        var groupDetails = competencyGroup.First();
        var questions = competencyGroup.SelectMany(c => c.AssessmentQuestions).Where(q => q.Required);
        var selfAssessedCount = questions.Count(q => q.ResultId.HasValue);
        var verifiedCount = questions.Count(q => q.Verified.HasValue);
        competencySummariesEnumerator.MoveNext();
        <div class="nhsuk-panel competency-group-panel nhsuk-u-padding-0">
            @{
                var expanderOpen = Model.CompetencyGroups.Count() == 1
                ? "open"
                : ViewContext.RouteData.Values.ContainsKey("competencyGroupId")
                ? ViewContext.RouteData.Values["competencyGroupId"].Equals(competencyGroup.First().CompetencyGroupID.ToString()) ? "open" : ""
                : "";
            }
            <details class="nhsuk-details nhsuk-expander" @(expanderOpen)>
                <summary class="nhsuk-details__summary">
                    <span class="competency-group-title nhsuk-details__summary-text">
                        @competencyGroup.Key
                    </span>
                </summary>
                <div class="nhsuk-details__text">
                    <partial name="SelfAssessments/_CompetencySummary" view-data="@competencySummariesEnumerator.Current" />
                    @if (!String.IsNullOrEmpty(groupDetails.CompetencyGroupDescription))
                    {
                        <p class="nhsuk-body-l nhsuk-u-margin-left-7">@Html.Raw(groupDetails.CompetencyGroupDescription)</p>
                    }
                    @if (Model.SelfAssessment.LinearNavigation)
                    {
                        <partial name="SelfAssessments/_MeanScores"
                     view-data="@(new ViewDataDictionary(ViewData) { { "competencyGroup", competencyGroup } })" />
                    }
                    <partial name="SelfAssessments/_OverviewTable"
                     view-data="@(new ViewDataDictionary(ViewData) { { "linearNavigation", Model.SelfAssessment.LinearNavigation }, { "selfAssessment", Model.SelfAssessment }, { "ReviewerCommentsLabel", Model.SelfAssessment.ReviewerCommentsLabel } })"
                     model="competencyGroup" />


                </div>
            </details>
            <div class="outer-score-container">
                <partial name="SelfAssessments/_CompetencySummary" view-data="@competencySummariesEnumerator.Current" />
            </div>
            @if (Model.SelfAssessment.LinearNavigation)
            {
                <div class="outer-score-container nhsuk-u-padding-bottom-4">
                    <partial name="SelfAssessments/_MeanScores"
                 view-data="@(new ViewDataDictionary(ViewData) { { "competencyGroup", competencyGroup } })" />
                </div>
            }
        </div>
    }
    <partial name="_OverviewActionButtons.cshtml" model=Model />
}

@if (Model.SelfAssessment.IncludesSignposting)
{
    <p class="nhsuk-u-reading-width">Once you are happy with your responses, submit your self-assessment to retrieve a list of recommended learning resources.</p>

    @if (Configuration.IsSignpostingUsed())
    {
        <a class="nhsuk-button finish-review-button trigger-loader"
   asp-controller="RecommendedLearning"
   asp-route-selfAssessmentId="@Model.SelfAssessment.Id"
   asp-action=@(Model.SelfAssessment.UnprocessedUpdates ? "SelfAssessmentResults" : "RecommendedLearning")
   role="button">
            Submit results
        </a>
    }
    else
    {
        <a class="nhsuk-button finish-review-button trigger-loader"
   asp-controller="RecommendedLearning"
   asp-route-selfAssessmentId="@Model.SelfAssessment.Id"
   asp-action=@(Model.SelfAssessment.UnprocessedUpdates ? "SelfAssessmentResults" : "RecommendedLearning")
   role="button">
            Submit self assessment
        </a>
    }
}
@if (Model.SelfAssessment.IsSupervised)
{
    <div class="nhsuk-panell competency-group-panel nhsuk-u-padding-4">
        <partial name="SelfAssessments/_SelfAssessmentOverallProgress"
             model="@competencySummaries"
             view-data="@(new ViewDataDictionary(ViewData) { { "IsSupervisorResultsReviewed", Model.SelfAssessment.IsSupervisorResultsReviewed } })" />
        <h2>@Model.SelfAssessment.SignOffRoleName Sign-off</h2>
        <partial name="../../Supervisor/Shared/_SupervisorSignOffSummary.cshtml" model="Model.SupervisorSignOffs" />
        @if (Model.AllQuestionsVerifiedOrNotRequired)
        {
            @if (!Model.SupervisorSignOffs.Any())
            {
                <p class="nhsuk-body-l">You have not yet requested @Model.SelfAssessment.SignOffRoleName sign-off for this self assessment.</p>
            }
            else if (latestResult > latestSignoff)
            {
                <div class="nhsuk-warning-callout">
                    <h3 class="nhsuk-warning-callout__label">
                        <span role="text">
                            <span class="nhsuk-u-visually-hidden">New self assessment results</span>
                            New self assessment results
                        </span>
                    </h3>
                    <p>
                        You have submitted new self assessment results since this self assessment was signed off.
                        Please resubmit your self assessment for sign off once these results are confirmed.
                    </p>
                </div>
            }
          @if (!Model.SupervisorSignOffs.Any() || latestResult > latestSignoff) {
            <a class="nhsuk-button nhsuk-button--secondary nhsuk-u-margin-bottom-2"
       asp-action="RequestSignOff"
       asp-route-vocabulary="@Model.SelfAssessment.Vocabulary"
       asp-route-selfAssessmentId="@Model.SelfAssessment.Id"
       role="button">
                Request @Model.SelfAssessment.SignOffRoleName sign-off
            </a>
          }
        }
        else
        {
            <p class="nhsuk-body-l">
                All required @Model.SelfAssessment.Vocabulary.ToLower() self-assessments must be completed and confirmed,
                before requesting @Model.SelfAssessment.SignOffRoleName sign off of the @Model.SelfAssessment.Name.
            </p>
        }
    </div>
}
